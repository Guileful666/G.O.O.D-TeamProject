<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="MemberMapper">
	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다 -->
	<resultMap type="study.spring.goodspring.model.Member"
		id="MemberMap">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼을 연결한다. -->
		<result property="user_no" column="user_no" />
		<result property="user_id" column="user_id" />
		<result property="user_name" column="user_name" />
		<result property="user_nick" column="user_nick" />
		<result property="user_pw" column="user_pw" />
		<result property="gender" column="gender" />
		<result property="address1" column="address1" />
		<result property="address2" column="address2" />
		<result property="post" column="post" />
		<result property="tel" column="tel" />
		<result property="email" column="email" />
		<result property="photoJson" column="user_photo" />
		<result property="user_admin" column="user_admin" />
		<result property="create_datetime" column="create_datetime" />
		<result property="edit_datetime" column="edit_datetime" />
	</resultMap>
	<!-- 로그인을 위한 조회 기능 -->
	<select id="login"
		parameterType="study.spring.goodspring.model.Member"
		resultMap="MemberMap">
		SELECT user_no, user_id, user_name, user_nick, gender,
		address1, address2, post, tel,
		email, user_photo, user_admin,
		create_datetime,
		edit_datetime
		FROM user_info
		WHERE user_id=#{user_id}
		AND user_pw=MD5(#{user_pw})
	</select>


	<!-- 아이디 찾기를 위한 조회 기능 -->
	<select id="findId"
		parameterType="study.spring.goodspring.model.Member"
		resultMap="MemberMap">
		SELECT user_no, user_id, user_name, user_nick, gender,
		address1, address2, post, tel,
		email, user_photo, user_admin,
		create_datetime,
		edit_datetime
		FROM user_info
		WHERE
		user_name=#{user_name} AND email=#{email}
	</select>
	<!-- 비밀번호 찾기를 위한 조회 기능 -->
	<select id="findPw"
		parameterType="study.spring.goodspring.model.Member"
		resultMap="MemberMap">
		SELECT user_no, user_id, user_name, user_nick, gender,
		address1, address2, post, tel,
		email, user_photo, user_admin,
		create_datetime,
		edit_datetime
		FROM user_info
		WHERE
		user_name=#{user_name} AND email=#{email} AND user_id=#{user_id}
	</select>
	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="study.spring.goodspring.model.Member"
		resultMap="MemberMap">SELECT user_no, user_id, user_name, user_nick, gender,
		address1, address2, post, tel,
		email, user_photo, user_admin,
		create_datetime,
		edit_datetime
		FROM user_info
		WHERE user_id=#{user_id};
	</select>
	<!-- 단일행 조회를 위한 기능 정의 (나만의코스 상세페이지)-->
	<select id="selectItemByNo"
		parameterType="study.spring.goodspring.model.Member"
		resultMap="MemberMap">SELECT *
		FROM user_info
		WHERE user_no=#{user_no};
	</select>
	<!-- 다중행 조회를 위한 기능 정의 -->
	<select id="selectList"
		parameterType="study.spring.goodspring.model.Member"
		resultMap="MemberMap">
		Select user_no, user_id, user_name, user_nick, gender,address1,
		address2, post,
		tel,
		email, user_photo, user_admin, create_datetime,
		edit_datetime FROM
		user_info
		<where>
			<if test="user_name !=null and user_name !=''">user_name LIKE concat ('%', #{user_name},'%')</if>
			<if test="user_nick !=null and user_nick !=''">OR user_nick LIKE concat ('%', #{user_nick},'%')</if>
		</where>
		ORDER BY user_no DESC
		<if test="listCount>0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<!-- 단일행 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="study.spring.goodspring.model.Member"
		useGeneratedKeys="true" keyProperty="user_no">
		INSERT INTO user_info (user_id,
		user_pw, user_name, user_nick, gender, address1, address2, post, tel,
		email,
		user_photo,
		user_admin, create_datetime, edit_datetime) VALUES
		(#{user_id}, MD5(#{user_pw}),
		#{user_name}, #{user_nick}, #{gender},
		#{address1}, #{address2},
		#{post}, #{tel},
		#{email}, #{photoJson},
		"N",
		now(), now());
	</insert>

	<!-- 단일행 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="study.spring.goodspring.model.Member">
		DELETE FROM user_info WHERE user_id=#{user_id};
	</delete>

	<!-- 회원정보 수정-->
	<update id="updateItem"
		parameterType="study.spring.goodspring.model.Member">
		UPDATE user_info SET 
		user_pw=MD5(#{user_pw}),
		user_name=#{user_name},
		user_nick=#{user_nick}, 
		address1=#{address1},
		address2=#{address2},
		post=#{post}, tel=#{tel},
		email=#{email},
		edit_datetime=now()
		WHERE user_id=#{user_id};
	</update>
	
	<!-- 프로필 사진 수정을 위한 갱신 -->
	<update id="updateProfile"
		parameterType="study.spring.goodspring.model.Member">
		UPDATE user_info SET user_photo=#{photoJson},
		edit_datetime=now()
		WHERE user_no=#{user_no};
	</update>
	
	<!-- 데이터 수 조회하기 -->
	<select id="selectCountAll"
		parameterType="study.spring.goodspring.model.Member" resultType="int">
		SELECT COUNT(*) FROM user_info
		<where>
			<if test="user_name !=null and user_name != ''">
				user_name LIKE concat ('%', #{user_nick}, '%')
			</if>
			<if test="user_nick !=null and user_nick != ''">
				OR user_nick LIKE concat ('%', #{user_nick}, '%')
			</if>
		</where>
	</select>
	
	<!-- 아이디 중복검사 -->
    <select id="idUniqueCheck" parameterType="study.spring.goodspring.model.Member" resultType="int">
        SELECT COUNT(*) FROM user_info WHERE user_id=#{user_id}
    </select>
    
    <!-- 닉네임 중복검사 -->
     <select id="nickUniqueCheck" parameterType="study.spring.goodspring.model.Member" resultType="int">
        SELECT COUNT(*) FROM user_info WHERE user_nick=#{user_nick}
    </select>
    
    <!-- 이메일 중복검사 -->
    <select id="emailUniqueCheck" parameterType="study.spring.goodspring.model.Member" resultType="int">
        SELECT COUNT(*) FROM user_info WHERE email=#{email}
    </select>
	
	<!-- 관리자 검사 -->
	<select id="selectadmin"
		parameterType="study.spring.goodspring.model.Member"
		resultMap="MemberMap">
		SELECT user_admin FROM user_info WHERE user_admin = 'Y';
	</select>
	
	<!-- 관리자 페이지 회원 추방 -->
	<delete id="deleteUserno"
		parameterType="study.spring.goodspring.model.Member">
		DELETE FROM user_info WHERE user_no=#{user_no};
	</delete>

</mapper>