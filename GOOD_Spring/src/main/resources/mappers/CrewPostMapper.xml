<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CrewPostMapper">

	<!-- Beans 클래스의 객체이름과 클래스이름 명시 -->
	<resultMap type="study.spring.goodspring.model.CrewPost"
		id="crewPostMap">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컴럼을 연결 -->
		<result property="post_no" column="post_no" />
		<result property="post_like" column="post_like" />
		<result property="post_crew" column="post_crew" />
		<result property="post_createdate" column="post_createdate" />
		<result property="post_editdate" column="post_editdate" />
		<result property="post_title" column="post_title" />
		<result property="post_content" column="post_content" />
		<result property="post_img" column="post_img" />
		<result property="post_hits" column="post_hits" />
		<result property="user_info_user_no" column="user_info_user_no" />

	</resultMap>



	<!-- 데이터 저장 -->
	<insert id="insertCrewPost"
		parameterType="study.spring.goodspring.model.CrewPost"
		useGeneratedKeys="true" keyProperty="post_no">
		INSERT INTO crew_post (post_like,
		post_crew, post_createdate, post_editdate,
		post_title, post_content,
		post_img,
		user_info_user_no)
		VALUES (#{post_like}, #{post_crew},
		now(), now(), #{post_title},
		#{post_content}, #{post_img},
		#{user_info_user_no});
	</insert>


	<!-- 포스트 게시물 데이터 수 조회를 위한 기능 정의 -->
	<select id="selectCountPostAll"
		parameterType="study.spring.goodspring.model.CrewPost" resultType="int">
		SELECT COUNT(*) FROM crew_post cp
		INNER JOIN crew c ON c.crew_no = cp.post_crew
		WHERE  c.crew_name = #{post_crew};
	</select>

	<!-- 단일행 조회 -->
	<select id="selectCrewPostItem" resultMap="crewPostMap"
		parameterType="study.spring.goodspring.model.CrewPost">
		SELECT *
		FROM crew_post
		WHERE post_no = #{post_no};
	</select>
	
	<!-- 다중행 조회 -->
	<select id="selectCrewPostInList"
		parameterType="study.spring.goodspring.model.CrewPost" resultMap="crewPostMap">
		SELECT * FROM crew_post
		INNER JOIN user_info ON user_info_user_no = user_no
		
		<where>
			post_crew LIKE #{post_crew}
		
			<if test="post_title != null and post_title != '' ">
				OR post_title LIKE CONCAT('%', #{post_title}, '%')
			</if>

			<if test="post_content != null and post_content != '' ">
				OR post_content LIKE CONCAT('%', #{post_content}, '%')
			</if>

		</where>
		
		ORDER BY post_no DESC

		<if test="listCount > 0">
			LIMIT #{offset}, #{listCount}
		</if>
		
	</select>
	
	
	
	
		<!-- Post_no를 통한 Crew 조회 -->
	<select id="selectCrewPost" resultMap="crewPostMap"
		parameterType="study.spring.goodspring.model.CrewPost">
		SELECT c.* FROM crew_post cp
		INNER JOIN crew c ON c.crew_name=cp.post_crew
		WHERE  cp.post_no = #{post_no};
	</select>

<!-- post게시자 닉네임 -->
	<select id="selectCrewUser" resultMap="crewPostMap"
		parameterType="study.spring.goodspring.model.CrewPost">
				SELECT u.* FROM crew_post cp
		INNER JOIN user_info u ON u.user_no=cp.user_info_user_no
		WHERE  cp.post_no = #{post_no};
	</select>
	
	<!-- myPost 페이지를 위한 사용자가 작성한 글 목록 조회-->
	<select id="selectCrewPostList" resultMap="crewPostMap"
		parameterType="study.spring.goodspring.model.CrewPost">
		SELECT post_no, post_like,
		post_crew, post_createdate, post_editdate,
		post_title, post_content,
		post_img, post_hits
		user_info_user_no 
		FROM crew_post
		WHERE user_info_user_no = #{user_info_user_no}
		ORDER BY post_createdate ASC
	</select>
	
	<!-- 크루게시물 수 조회를 위한 기능 정의 -->
		<select id="selectPostCountAll"
		parameterType="study.spring.goodspring.model.CrewPost" resultType="int">
		SELECT COUNT(*) FROM crew_post
		
		<where>
			post_crew LIKE #{post_crew}
		
			<if test="post_title != null and post_title != '' ">
				OR post_title LIKE CONCAT('%', #{post_title}, '%')
			</if>

			<if test="post_content != null and post_content != '' ">
				OR post_content LIKE CONCAT('%', #{post_content}, '%')
			</if>

		</where>
		
	</select>
	
		<!-- 조회수 증가 기능 -->
	<update id="updateHitsCrewPost"
		parameterType="study.spring.goodspring.model.CrewPost">
		UPDATE crew_post SET post_hits=post_hits+1
		WHERE post_no = #{post_no};
	</update>
	
	<!-- 댓글 수 조회 -->
		<select id="selectCountCmtAll"
		parameterType="study.spring.goodspring.model.CrewPost" resultType="int">
		SELECT count(*) FROM crew_post cp
		INNER JOIN crew_comment cr ON cr.crew_post_post_no = cp.post_no
		WHERE cp.post_no = #{post_no};
	</select>

	<!-- 게시글 수정 -->
		<update id="updateCrewPost"
		parameterType="study.spring.goodspring.model.CrewPost">
		UPDATE crew_post SET post_editdate = now(), post_title = #{post_title},
		post_content = #{post_content}
		WHERE post_no = #{post_no};
	</update>
	
	<!-- 게시글 삭제 -->
	<delete id="deleteCrewPost" parameterType="study.spring.goodspring.model.CrewPost">
	DELETE FROM crew_post
	WHERE post_no = #{post_no};
	</delete>

	<!-- 참조해제 -->
	<update id="unsetcrewpostuserno" parameterType="study.spring.goodspring.model.CrewPost">
	UPDATE crew_post SET user_info_user_no=null WHERE user_info_user_no=#{user_info_user_no};
	</update>
</mapper>
