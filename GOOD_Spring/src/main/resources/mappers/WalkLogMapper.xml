<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="WalkLogMapper">

	<!-- Beans 클래스의 객체이름과 클래스이름 명시 -->
	<resultMap type="study.spring.goodspring.model.WalkLog"
		id="WalkLogMap">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컴럼을 연결 -->
		<result property="walk_log_no" column="walk_log_no" />
		<result property="user_info_user_no" column="user_info_user_no" />
		<result property="walk_log_datetime" column="walk_log_datetime" />
		<result property="walking_time" column="walking_time" />
		<result property="walking_distance" column="walking_distance" />
		<result property="lon" column="lon" />
		<result property="lat" column="lat" />
		<result property="event_name" column="event_name" />
		<result property="course_name" column="course_name" />
	</resultMap>

	<!-- 단일행 조회 -->
	<select id="selectWalkLogItem" resultMap="WalkLogMap"
		parameterType="study.spring.goodspring.model.WalkLog">
		SELECT *
		FROM walk_log where
		user_info_user_no=#{user_info_user_no} ORDER BY walk_log_no DESC LIMIT
		0,1;

	</select>

	<!-- 중복 데이터 삭제를 위한 단일행 조회 -->
	<select id="selectSamePosition" resultMap="WalkLogMap"
		parameterType="study.spring.goodspring.model.WalkLog">
		SELECT walk_log_no, walk_log_datetime, walking_time,
		walking_distance, lon,
		lat, event_name
		FROM walk_log where
		user_info_user_no=#{user_info_user_no} ORDER BY walk_log_no DESC LIMIT
		0,1;

	</select>

	<!--다중행 조회 -->
	<select id="selectWalkLogList"
		parameterType="study.spring.goodspring.model.WalkLog"
		resultMap="WalkLogMap">
		SELECT *
		FROM walk_log
		WHERE
		user_info_user_no=#{user_info_user_no}

	</select>

	<!-- 데이터 저장 기능 -->
	<insert id="startRecord"
		parameterType="study.spring.goodspring.model.WalkLog"
		useGeneratedKeys="true" keyProperty="walk_log_no">
		INSERT INTO walk_log
		(user_info_user_no, walk_log_datetime,
		walking_time, walking_distance,
		lon,
		lat, event_name)
		VALUES (#{user_info_user_no},
		now(),
		#{walking_time},
		null,
		#{lon},
		#{lat},
		'시작' );
	</insert>
	<insert id="insertWalkLog"
		parameterType="study.spring.goodspring.model.WalkLog"
		useGeneratedKeys="true" keyProperty="walk_log_no">
		INSERT INTO walk_log
		(user_info_user_no, walk_log_datetime,
		walking_time, walking_distance,
		lon,
		lat, event_name)
		VALUES (#{user_info_user_no},
		now(),
		#{walking_time},
		null,
		#{lon},
		#{lat},
		'기록' );
	</insert>

	<!-- 데이터 삭제 기능 -->
	<delete id="deleteWalkLog"
		parameterType="study.spring.goodspring.model.WalkLog">
		DELETE FROM walk_log WHERE walk_log_no=#{walk_log_no};
	</delete>


	<!-- 데이터 수정 기능 -->
	<update id="updateWalkLog"
		parameterType="study.spring.goodspring.model.WalkLog">
		UPDATE inquiry_qna SET
		answer_detail=#{answer_detail},
		answer_yn=#{answer_yn},
		answer_create_datetime=now()
		WHERE
		QnA_no =
		#{QnA_no};
	</update>
	<!-- 기록하기 종료 -->
	<update id="endRecord"
		parameterType="study.spring.goodspring.model.WalkLog">
		UPDATE walk_log SET event_name='종료'
		WHERE
		user_info_user_no=#{user_info_user_no} and event_name='기록'
		ORDER BY walk_log_no DESC LIMIT
		1;
	</update>
	<!-- 가장 최근의 기록 시작부터 기록 종료까지의 값을 가져온다. -->
	<select id="selectLogList" resultMap="WalkLogMap"
		parameterType="study.spring.goodspring.model.WalkLog">
		SELECT walk_log_no, walk_log_datetime

		FROM walk_log

		WHERE
		(walk_log_datetime BETWEEN
		(SELECT MAX(walk_log_datetime)
		FROM walk_log
		WHERE
		event_name='시작')

		AND (SELECT MAX(walk_log_datetime) FROM walk_log
		WHERE event_name='종료'))

		AND user_info_user_no=#{user_info_user_no};
	</select>

	<!-- 좌표값 전달을 위한 다중행 조회 (작성페이지, 리스트페이지) -->
	<select id="selectLocationList"
		parameterType="study.spring.goodspring.model.WalkLog"
		resultMap="WalkLogMap">
		SELECT *
		FROM walk_log
		WHERE
		user_info_user_no=#{user_info_user_no} and course_name=#{course_name}
	</select>
		<!-- 좌표값 전달을 위한 다중행 조회 (상세페이지)-->
	<select id="selectLocationList2"
		parameterType="study.spring.goodspring.model.WalkLog"
		resultMap="WalkLogMap">
		SELECT *
		FROM walk_log
		WHERE
		course_name=#{course_name}
	</select>
	
	
	<!-- 사용자가 저장한 코스 이름을 다중행 조회 -->
	<select id="selectCourseNameList"
		parameterType="study.spring.goodspring.model.WalkLog"
		resultMap="WalkLogMap">
		SELECT course_name
		FROM walk_log
		where
		user_info_user_no=#{user_info_user_no}
		GROUP BY course_name
	</select>
	<!-- 기록하기 중지 할때 , 현재 기록된 데이터에 코스 이름을 저장한다.-->
	<update id="updateCourseName"
		parameterType="study.spring.goodspring.model.WalkLog">
		update good.walk_log 
		SET course_name=#{course_name} 
		WHERE walk_log_datetime
		in (select walk_log_datetime from (SELECT walk_log_datetime FROM
		good.walk_log
		WHERE (walk_log_datetime BETWEEN (SELECT MAX(walk_log_datetime) FROM
		walk_log
		WHERE event_name='시작') AND (SELECT MAX(walk_log_datetime) FROM walk_log
		WHERE
		event_name='종료')) AND user_info_user_no=#{user_info_user_no}) as temp);
	</update>
	<!--  코스 이름을 중복검사-->
    <select id="courseNameUniqueCheck" parameterType="study.spring.goodspring.model.WalkLog" resultType="int">
        SELECT COUNT(*) 
        FROM walk_log 
        WHERE course_name=#{course_name} and user_info_user_no=#{user_info_user_no}
    </select>
    	<!-- 나만의 코스 작성 페이지 진입 시 코스이름이 없는 워크 로그를 지운다. -->
    <delete id="deleteNull" parameterType="study.spring.goodspring.model.WalkLog">
    DELETE FROM walk_log WHERE user_info_user_no=#{user_info_user_no} AND course_name IS NULL
    </delete>
</mapper>